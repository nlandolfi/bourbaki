<!--
!name:functions
!need:relations
!refs:paul_halmos∕naive_set_theory∕section_08
!refs:bert_mendelson∕introduction_to_topology∕theory_of_sets∕functions
for inclusion mappings:
!refs:bert_mendelson∕introduction_to_topology∕theory_of_sets∕inverse_functions_extensions_and_restrictions
-->

§ Why ⦉
¶ ⦊
  ‖ We want a notion for a correspondence between two sets. ⦉
⦉

§ Definition ⦉
¶ ⦊
  ‖ A ❬function❭ (or ❬mapping❭ or ❬map❭) $f$ ❬from❭ a set $X$
    ❬to❭ a set $Y$ is a relation (see
    \sheetref{relations}{Relations}) whose domain is $X$, whose
    range is a subset of $Y$, such that for each $x ∈ X$,
    there exists a unique $y ∈ Y$ so that $(x, y) ∈ f$. ⦉
⦉

¶ ⦊
  ‖ We call the unique $y ∈ Y$ the ❬result❭ of the function
    ❬at❭ the ❬argument❭ $x$. ⦉

  ‖ We call $Y$ the ❬codomain❭. ⦉

  ‖ If the range is $Y$ we say that $f$ is a function from
    $X$ ❬onto❭ $Y$ (or $f$ is ❬surjective❭). ⦉

  ‖ If distinct elements of $X$ are mapped to distinct elements
    of $Y$, we say that the function is ❬one-to-one❭ (or
    ❬injective❭). ⦉
⦉

¶ ⦊
  <!-- We know functions by how the associate elements of their codomain with elements of their domain.  -->

  ‖ We say that the function ❬maps❭ (or ❬takes❭) elements from
    the domain to the codomain. ⦉

  ‖ Since the word “function} and the verb “maps” connote
    activity, some authors refer to the set of ordered pairs as
    the ❬graph❭ of a function and avoid defining “function” in
    terms of sets. ⦉

  ‖ ❲% ill-define.❳ ⦉

  ‖ ❲% —namely, the set of ordered pairs which that function produces—and leave the concept of function undefined.❳ ⦉

  ‖ ❲% They do not define functions in terms of sets.❳ ⦉
⦉

§§ Notation ⦉
¶ ⦊
  ‖ Let $X$ and $Y$ denote sets. ⦉

  ‖ We denote a function named $f$ whose domain is $X$ and
    whose codomain is $Y$ by $f: X → Y$. ⦉

  ‖ We read the notation aloud as “$f$ from $X$ to $Y$”. ⦉

  ‖ We denote the set of all functions from $X$ to $Y$ (which
    is a subset of $\powerset{(X × Y)}$) by $Y^{X}$. ⦉

  ‖ A less standard but equally good notation is $X → Y$, read
    aloud as “$A$ to $B$”. ⦉

  ‖ Using the earlier notation, we denote that $f ∈ (A → B)$
    by $f: A → B$. ⦉

  ‖ We tend to denote function by lower case latin letters,
    especially $f$, $g$, and $h$. ⦉

  ‖ $f$ is a mnemonic for function and $g$ and $h$ are nearby
    in the usual ordering of the Latin alphabet. ⦉
⦉

¶ ⦊
  ‖ Let $f: A → B$. ⦉

  ‖ For each element $a ∈ A$, we denote the result of applying
    $f$ to $a$ by $f(a)$, read aloud “f of a.” ⦉

  ‖ We sometimes drop the parentheses, and write the result as
    $f_a$, read aloud as “f sub a.” ⦉

  ‖ Let $g: A × B → C$. ⦉

  ‖ We often write $g(a,b)$ or $g_{ab}$ instead of $g((a,b))$. ⦉

  ‖ We read $g(a, b)$ aloud as “g of a and b”. ⦉

  ‖ We read $g_{ab}$ aloud as “g sub a b.” ⦉

  ‖ ❲%TODO: maps to notation❳ ⦉

  ‖ ❲% We sometimes write $x ↦ f(x)$ read aloud as \say{$x$ maps to $f(x)$.❳ ⦉
⦉

§§ Examples ⦉
¶ ⦊
  ‖ If $X ⊂ Y$, the function $\Set{(x, y) ∈ X × Y}{x = y}$
    is the ❬inclusion function❭ of $X$ into $Y$. ⦉

  ‖ We often introduce such a function as “the function from
    $X$ to $Y$ defined by $f(x) = y$”. ⦉

  ‖ We mean by this that $f$ is a function and that we are
    specifying the appropraite ordered pairs using the statement,
    called ❬argument-value notation❭. ⦉

  ‖ The inclusion function of $X$ into $X$ is called the
    ❬identity function❭ of $X$. ⦉

  ‖ If we view the identity function as a relation on $X$, it
    is the relation of equality on $X$. ⦉
⦉

¶ ⦊
  ‖ The functions $f: (X × Y) → X$ defined by $f(x, y) = x$
    is the ❬pair projection❭ of $X × Y$ ono $X$. ⦉

  ‖ Similarly $g: (X × Y) → Y$ defined by $g(x, y) = y$ is
    the pair projection of $X × Y$ onto $Y$. ⦉

  ‖ ❲% The range of $f$ is the first coordinate projection of $f$ and the range of $g$ is the second coordinate projection of $f$ (see \sheetref{ordered_pair_projections}{Ordered Pair Projections}).❳ ⦉

  ‖ The identity function is one-to-one and onto, the inclusion
    functions are one-to-one but not always onto, and the pair
    projections are usually not one-to-one. ⦉
⦉

¶ ⦊
  ‖ ❲% What follows are the old extra sheets.❳ ⦉

  ‖ ❲%%!name:injective_functions❳ ⦉

  ‖ ❲%%!need:functions❳ ⦉
⦉

¶ ⦊
  ‖ ❲% \ssection{Why}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% An element of the codomain may be the result❳ ⦉

  ‖ ❲% of several elements of the domain.❳ ⦉

  ‖ ❲% This overlapping, using an element of the❳ ⦉

  ‖ ❲% codomain more than once, is a regular occurrence.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% \ssection{Definition}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% If a function is a unique correspondence in that❳ ⦉

  ‖ ❲% every domain element has a different result,❳ ⦉

  ‖ ❲% we call it \casdft{one-to-one}{one-to-one}.❳ ⦉

  ‖ ❲% This language is meant to suggest that each❳ ⦉

  ‖ ❲% element of the domain corresponds to one and❳ ⦉

  ‖ ❲% exactly one element of the codomain, and vice versa.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% We also call such functions \casdft{injective}{}.❳ ⦉
⦉

¶ ⦊
  ‖ ❲%%!name:surjective_functions❳ ⦉

  ‖ ❲%%!need:functions❳ ⦉
⦉

¶ ⦊
  ‖ ❲% \ssection{Why}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% The range need not equal the codomain; though it,❳ ⦉

  ‖ ❲% like every other image, is a subset of the codomain.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% \ssection{Definition}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% The function \rasdft{maps}{functionmaps} to domain❳ ⦉

  ‖ ❲% \casdft{on}{functionon} to the codomain if the❳ ⦉

  ‖ ❲% range and codomain are equal;❳ ⦉

  ‖ ❲% in this case we call the function \casdft{onto}{onto}.❳ ⦉

  ‖ ❲% This language suggests that every element of❳ ⦉

  ‖ ❲% the codomain is used by the function.❳ ⦉

  ‖ ❲% It means that for each element of the codomain,❳ ⦉

  ‖ ❲% we can find an element of the domain whose result is that first element of the codomain.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% We also call the function \casdft{surjective}{}.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% \ssubsection{Notation}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% Let $f: A → B$.❳ ⦉

  ‖ ❲% Using prior notation, we can❳ ⦉

  ‖ ❲% state that $f$ is onto by❳ ⦉

  ‖ ❲% writing $f(A) = B$.❳ ⦉
⦉

¶ ⦊
  ‖ ❲%%!name:identity_functions❳ ⦉

  ‖ ❲%%!need:functions❳ ⦉
⦉

¶ ⦊
  ‖ ❲% \ssection{Why}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% What is an example❳ ⦉

  ‖ ❲% of a function?❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% \ssection{Definition}❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% Consider the relation on❳ ⦉

  ‖ ❲% a non-empy set which includes❳ ⦉

  ‖ ❲% ordered pairs of elements❳ ⦉

  ‖ ❲% from the set if the first❳ ⦉

  ‖ ❲% element is the second element.❳ ⦉

  ‖ ❲% In other words, two elements❳ ⦉

  ‖ ❲% are related if and only if❳ ⦉

  ‖ ❲% they are the same object.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% This relation is functional:❳ ⦉

  ‖ ❲% Each element corresponds to❳ ⦉

  ‖ ❲% only one element: itself.❳ ⦉

  ‖ ❲% We call this functional relation❳ ⦉

  ‖ ❲% the❳ ⦉

  ‖ ❲% \casdft{identity function}{}❳ ⦉

  ‖ ❲% of the set.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% \ssubsection{Notation”❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% Let $A$ be a non-empty set.❳ ⦉

  ‖ ❲% If $f: A → A$ satisfies❳ ⦉

  ‖ ❲% $f(a) = a$ for each $a ∈ A$,❳ ⦉

  ‖ ❲%   then $f$ is the identity function.❳ ⦉

  ‖ ❲%❳ ⦉

  ‖ ❲% We denote the identity❳ ⦉

  ‖ ❲% function on $A$ by $\id_A$.❳ ⦉

  ‖ ❲% So $\id_A: A → A$ satisfies❳ ⦉

  ‖ ❲% $\id_A(a) = a$ for each $a ∈ A$.❳ ⦉

  ‖ ⦉
⦉
